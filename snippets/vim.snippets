# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
snippet subtemp "Substrate v3 Template" b
#![cfg_attr(not(feature = "std"), no_std)]

use sp_runtime::RuntimeDebug;

use codec::{Encode, Decode};
use sp_std::vec::Vec;

pub use pallet::*;

#[frame_support::pallet]
pub mod pallet {
	use frame_support::pallet_prelude::*;
	use frame_system::pallet_prelude::*;
	use frame_support::transactional;
	use super::*;

	#[pallet::config]
	pub trait Config: frame_system::Config {
		type Event: From<Event<Self>> + IsType<<Self as frame_system::Config>::Event>;
		type Call: From<Call<Self>>;
	}

	#[pallet::error]
	pub enum Error<T> {}

	#[pallet::event]
	#[pallet::generate_deposit(pub (crate) fn deposit_event)]
	pub enum Event<T: Config> {}

	#[pallet::pallet]
	#[pallet::generate_store(pub(super) trait Store)]
	pub struct Pallet<T>(_);

	#[pallet::hooks]
	impl<T: Config> Hooks<BlockNumberFor<T>> for Pallet<T> {}

	#[pallet::genesis_config]
	pub struct GenesisConfig {}

	#[cfg(feature = "std")]
	impl GenesisConfig {
		/// Direct implementation of `GenesisBuild::build_storage`.
		///
		/// Kept in order not to break dependency.
		pub fn build_storage<T: Config>(&self) -> Result<sp_runtime::Storage, String> {
			<Self as frame_support::traits::GenesisBuild<T>>::build_storage(self)
		}

		/// Direct implementation of `GenesisBuild::assimilate_storage`.
		///
		///// Kept in order not to break dependency.
		pub fn assimilate_storage<T: Config>(
			&self,
			storage: &mut sp_runtime::Storage,
		) -> Result<(), String> {
			<Self as frame_support::traits::GenesisBuild<T>>::assimilate_storage(self, storage)
		}
	}

	#[pallet::genesis_build]
	impl<T: Config> GenesisBuild<T> for GenesisConfig {
		fn build(&self) {}
	}

	/// A public part of the pallet.
	#[pallet::call]
	impl<T: Config> Pallet<T> {
		#[pallet::weight(0)]
		#[transactional]
		pub fn say_hi(origin: OriginFor<T>) -> DispatchResultWithPostInfo {
			let _ = ensure_signed(origin)?;
			Ok(().into())
		}
	}
}
endsnippet

snippet subdeps "Substrate v3 Dependencies" b
[package.metadata.docs.rs]
targets = ['x86_64-unknown-linux-gnu']

[dependencies]
codec           = { package          = "parity-scale-codec", version = "2.0.0", default-features            = false }
frame-support   = { default-features = false, version                = '3.0.0' }
frame-system    = { default-features = false, version                = '3.0.0' }
orml-currencies = { default-features = false, version                = '0.4.0' }
orml-tokens     = { default-features = false, version                = '0.4.0' }
orml-traits     = { default-features = false, version                = '0.4.0' }
orml-utilities  = { default-features = false, version                = '0.4.0' }
primitives      = { package          = "parallel-primitives", path   = "../../primitives", default-features = false }
serde           = { package          = "alt_serde", version          = "1", default-features                = false, features = ["derive"] }
serde_json      = { package          = "alt_serde_json", version     = "1", default-features                = false, features = ["alloc"] }
sp-runtime      = { version          = "3.0.0", default-features     = false }
sp-std          = { version          = "3.0.0", default-features     = false }
sp-keystore     = { version          = "0.9.0", optional             = true }
sp-io           = { version          = "3.0.0", default-features     = false }
sp-core         = { version          = "3.0.0", default-features     = false }

[dev-dependencies]
serde           = { version          = "1.0.119" }
sp-core         = { default-features = false, version = '3.0.0' }
sp-io           = { default-features = false, version = '3.0.0' }
sp-runtime      = { default-features = false, version = '3.0.0' }
pallet-balances = { default-features = false, version = '3.0.0' }

[features]
default = ['std']
std     = [
	'codec/std',
	'frame-support/std',
	'frame-system/std',
	'orml-currencies/std',
	'orml-tokens/std',
	'orml-traits/std',
	'orml-utilities/std',
	'primitives/std',
	'sp-core/std',
	'sp-io/std',
	'sp-runtime/std',
	'sp-keystore/std',
	'sp-std/std'
]
endsnippet
